# -*- coding: utf-8 -*-
"""Stock_Price_Predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VeAxFzSOyPSCaAev2wB7-4rHMFGp7zHB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

import datetime
start = '2012-01-01'
end = datetime.date.today()
stock='GOOG'
data = yf.download(stock, start, end)

data

data.reset_index(inplace=True)
data

ma_100_days = data.Close.rolling(100).mean()

plt.figure(figsize=(8,6))
plt.plot(ma_100_days, 'r')
plt.plot(data.Close, 'g')
plt.show()

data.dropna(inplace=True)

data_train = pd.DataFrame(data.Close[0: int(len(data)*0.80)])
data_test = pd.DataFrame(data.Close[int(len(data)*0.80) : len(data)])

data_train.shape

data_test.shape

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))

data_train_scale = scaler.fit_transform(data_train)

x = []
y = []

for i in range(100, data_train_scale.shape[0]):
  x.append(data_train_scale[i-100:i])
  y.append(data_train_scale[i,0])

x, y = np.array(x), np.array(y)

from keras.layers import Dense, LSTM, Dropout, Input
from keras.models import Sequential
from keras import metrics

model = Sequential()


model.add(Input(shape=(x.shape[1], 1)))

model.add(LSTM(units=50, activation='relu', return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=60, activation='relu', return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units=80, activation='relu', return_sequences=True))
model.add(Dropout(0.4))

model.add(LSTM(units=120, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(units=1))

model.summary()

model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])

model.fit(x,y, epochs = 50, batch_size =32, verbose =1)

pas_100_days = data_train.tail(100)

data_test = pd.concat([pas_100_days, data_test], ignore_index=True)

data_test.shape

data_test_scale = scaler.fit_transform(data_test)

x = []
y = []

for i in range(100, data_test_scale.shape[0]):
    x.append(data_test_scale[i-100:i])
    y.append(data_test_scale[i,0])
x, y = np.array(x), np.array(y)

print(x.shape)
print(y.shape)

y_pred = model.predict(x)

scale =1/scaler.scale_

y_predict = y_pred*scale

y = y*scale

plt.figure(figsize=(10,8))
plt.plot(y_predict, 'r', label = 'Predicted Price')
plt.plot(y, 'g', label = 'Original Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

model.save("Stock_Predictions_Model2.keras")

model.save("Stock_Predictions_Model2.h5")

from keras.models import save_model
save_model(model, "Stock_Predictions_Model3.keras", save_format="keras_v3")

